version: 2.1
orbs:
  ruby: circleci/ruby@2.0.1
jobs:
  build-test-rails:
    docker:
      - image: cimg/ruby:3.3.0-node
        environment:
          RAILS_ENV: test
          MEETING_ROOM_DATABASE_URL: postgres://gomeeting@localhost/gomeeting_test
          REDIS_URL: 'redis://localhost:6379'
          CC_TEST_REPORTER_ID: 3bc6b33ff8487e6acdd97135f7dc33dab87a7e22c2d24632dd86ad1b769a7f42

      - image: cimg/postgres:9.6.22
        environment:
          POSTGRES_USER: gomeeting
          POSTGRES_DB: gomeeting_test

      - image: cimg/redis:6.2.6

    steps:
      - checkout
      - ruby/install-deps
      - run:
          name: Wait for database
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Wait for redis
          command: dockerize -wait tcp://localhost:6379 -timeout 1m
      - run:
          name: Repair database for test env
          command: bundle exec rake db:test:prepare
      - run:
          name: Run rspec
          command: bundle exec rspec

      - store_artifacts:
          path: coverage

      - run:
          name: Setup Code Climate test-reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter

      - run:
          name: Setup Code Climate test-reporter
          command: |
            ./cc-test-reporter format-coverage -t simplecov $CIRCLE_ARTIFACTS/coverage/.resultset.json
            ./cc-test-reporter upload-coverage

  published-golden-meeting-staging-version:
    docker:
      - image: cimg/base:current-22.04

    steps:
      - attach_workspace:
          at: .

      - setup_remote_docker

      - run:
          name: Build staging image
          command: |
            echo MEETING_ROOM_DATABASE_URL=${DATABASE_URL} > .env
            echo REDIS_URL=${MEETING_ROOM_REDIS_URL} >> .env
            echo RAILS_MASTER_KEY=${RAILS_MASTER_KEY} >> .env
            docker network create proxy
            docker-compose -f docker-compose.prod.yml build --pull

      - run:
          name: Published staging image
          command: |
            docker login -u ${DOCKER_ACCOUNT} -p ${DOCKER_TOKEN}
            docker-compose -f docker-compose.prod.yml push

      - persist_to_workspace:
          root: .
          paths:
            - .

  deploy-golden-meeting-staging:
    docker:
      - image: cimg/base:stable
    steps:
      - attach_workspace:
          at: .

      - add_ssh_keys:
          fingerprints:
            - ${VPS_FINGERPRINT}

      - run:
          name: Deploy to staging cloud
          command: |
            ssh -o StrictHostKeyChecking=no -v root@mtech.id.vn -p 24700 "chmod +x ~/deploy.sh && ~/deploy.sh --service goldenmeeting --service-path goldenmeeting-app --mode init"
            scp -P 24700 -o StrictHostKeyChecking=no -v docker-compose.prod.yml root@mtech.id.vn:goldenmeeting-app/goldenmeeting
            scp -P 24700 -o StrictHostKeyChecking=no -v .env root@mtech.id.vn:goldenmeeting-app/goldenmeeting
            ssh -o StrictHostKeyChecking=no -v root@mtech.id.vn -p 24700 "chmod +x ~/deploy.sh && ~/deploy.sh --service goldenmeeting --service-path goldenmeeting-app --mode all"
workflows:
  build-and-test:
    jobs:
      - build-test-rails
      - hold:
          type: 'approval'
          requires:
            - build-test-rails
      - published-golden-meeting-staging-version
      - deploy-golden-meeting-staging
    # - deploy:
    #     requires:
    #       - test-ruby
